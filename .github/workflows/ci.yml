name: CI/CD

# Uncomment when ready to enable the workflow!
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

env:
  AWS_REGION : "eu-west-1"
  # Image Name is of the form <account id>.dkr.ecr.<region>.amazonaws.com/ci-images
  AWS_ECR_REPOSITORY_NAME: "ci-images"
  IMAGE_NAME : "${{ secrets.ECR_ROOT_URI }}/ci-images" # Cannot reference env var in same block :(

# Permissions required for Configure AWS Credentials to work    
permissions:
  id-token: write
  contents: read    # This is required for actions/checkout

jobs:
  infrastructure:
    name: Infrastructure Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up Docker BuildKit
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # Add this to repository secrets and potentially GitHub environments. Likely to be of the form "arn:aws:iam::<account_id>:role/GitHubActionsCI"
          role-session-name: CI_AWS_IAM
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Validate Terraform
        uses: stuartleeks/devcontainer-build-run@v0.1
        with:
          imageName: ${{ env.IMAGE_NAME }}
          refFilterForPush: refs/heads/main
          eventFilterForPush: push
          runCmd: make infra_init_validate
          env: |
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            AWS_SESSION_TOKEN
            AWS_REGION
            CI

      - name: Terraform Plan
        uses: stuartleeks/devcontainer-build-run@v0.1
        with:
          imageName: ${{ env.IMAGE_NAME }}
          push: never
          runCmd: make infra_plan
          env: |
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            AWS_SESSION_TOKEN
            AWS_REGION
            CI

      - name: Save Plan Artifact For Inspection
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: infrastructure/tfplan.txt
          if-no-files-found: ignore
          retention-days: 5

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        uses: stuartleeks/devcontainer-build-run@v0.1
        with:
          imageName: ${{ env.IMAGE_NAME }}
          push: never
          runCmd: make infra_apply
          env: |
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            AWS_SESSION_TOKEN
            AWS_REGION
            CI

      - name: Save Output As An Artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure_output
          path: infrastructure/out.json
          if-no-files-found: error
          retention-days: 5

# Add More tasks such as build, test, deploy applications e.g.
  sagemaker:
    name: Sagemaker Custom Images
    runs-on: ubuntu-latest
    needs: [infrastructure]
    strategy:
      matrix:
        image_name: [python-requirements]

    env:
      IMAGE_NAME: "${{matrix.image_name}}"
      IMAGE_TAG: "latest"
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Check if Dockerfile changed
        id: image_files_changed
        uses: tj-actions/changed-files@v29.0.7
        with:
          files: |
            custom_images/${{env.IMAGE_NAME}}/**

      - name: Set up Docker BuildKit
        if: steps.image_files_changed.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        if: steps.image_files_changed.outputs.any_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: CI_AWS_IAM
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.image_files_changed.outputs.any_changed == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Infrastructure Output
        if: steps.image_files_changed.outputs.any_changed == 'true' && github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v3
        with:
          name: infrastructure_output
          path: infrastructure/

      - name: Extract Environment Variables
        if: steps.image_files_changed.outputs.any_changed == 'true' && github.ref == 'refs/heads/main'
        run: make extract_env_vars

      - name: Build Image
        if: steps.image_files_changed.outputs.any_changed == 'true'
        run: make docker_build

      - name: Test Image
        if: steps.image_files_changed.outputs.any_changed == 'true'
        run: make docker_test_python_dependencies

      - name: Push Image
        if: steps.image_files_changed.outputs.any_changed == 'true' && github.ref == 'refs/heads/main'
        run: make docker_push

      - name: Create New Sage Maker Image Version
        if: steps.image_files_changed.outputs.any_changed == 'true' && github.ref == 'refs/heads/main'
        run: make sagemaker_create_image_version